// Arrays
// array ko copy karenge to wo shallow copy banayega -> same reference point -> change karne se original me change hoga
// deep copy -> do not share same reference 

const  myArr = [0, 1, 2, 3, 4, 5]   // [0, 1, 2, 3, 4, 5, true, "yans"] it's also an array it's allow diffrent data-types 
const myHeros = ["yans", "v"]
const a = new Array(1, 2, 3, 4)
console.log(myHeros[0])

// myArr.push(10)
// myArr.push(6)
// myArr.push(25)
// myArr.pop()
// myArr.unshift(9)   // strting me value add ho jayegi
// myArr.shift()

// console.log(myArr.includes(9))
// console.log(myHeros.indexOf("v"))
// const newArr = myArr.join()
// console.log(myArr)
// console.log(typeof myArr)
// console.log(newArr)
// console.log(typeof newArr)


// console.log("A ", myArr)
// const myn1 = myArr.slice(1, 3)
// console.log(myn1)
// console.log("B ", myArr)
// console.log("  ")
// const myn2 = myArr.splice(1, 3)
// console.log(myn2)
// console.log("C ", myArr)



// const marvel_heros = ["Thor", "Ironman", "Spiderman"]
// const dc_heros = ["Superman", "Flash", "Batman"]

// marvel_heros.push(dc_heros)
// console.log(marvel_heros)
// console.log(marvel_heros[1])
// console.log(marvel_heros[3])
// console.log(marvel_heros[3][2])

// const all_heros = marvel_heros.concat(dc_heros)
// console.log(all_heros)

// const all_new_heroes = [...marvel_heros, ...dc_heros]
// console.log(all_new_heroes)

// const another_arr = [1, 2, 3, [4, 5, 6], 7, [6, 7, [4, 5]]]
// const real_another_arr = another_arr.flat(Infinity)
// console.log(real_another_arr)

// console.log(Array.isArray("Hitesh"))
// console.log(Array.from("Hitesh"))
// console.log(Array.from({name: "yanna"}))

// let s1 = 100
// let s2 = 200
// let s3 = 300
// console.log(Array.of(s1, s2, s3))
